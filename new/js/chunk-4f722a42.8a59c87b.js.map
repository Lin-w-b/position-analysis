{"version":3,"sources":["webpack:///./src/views/mirai/vcl.vue?9994","webpack:///./src/views/mirai/vcl.vue?eb3e","webpack:///src/views/mirai/vcl.vue","webpack:///./src/views/mirai/vcl.vue?7aef","webpack:///./src/views/mirai/vcl.vue","webpack:///./src/utils/date.js","webpack:///./src/views/components/test-mock/vcl-mock.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","nativeOn","$event","handleRun","model","value","callback","$$v","runFlag","expression","_v","data","length","_s","name","_e","dateList","index","ref","staticRenderFns","vclData","option","positionList","positionColors","timer","mounted","activated","console","log","ininChart","methods","getData","newData","sort","a","b","map","item","run","speed","Math","round","mirai","push","insideIndex","chart","setOption","clearInterval","insideTimer","getOption","tooltip","trigger","backgroundColor","axisPointer","type","label","precision","grid","left","right","bottom","top","containLabel","xAxis","boundaryGap","axisTick","show","yAxis","axisLabel","fontSize","color","series","setInterval","component","getDateList","num","Array","keys","days","t","Date","now","month","getMonth","day","getDate","date","getFullYear","getDateBetween","star","end","startDate","parse","endDate","dateNum","reverse","random","success","msg","code"],"mappings":"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","file":"js/chunk-4f722a42.8a59c87b.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./vcl.vue?vue&type=style&index=0&id=74d218b9&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./vcl.vue?vue&type=style&index=0&id=74d218b9&lang=scss&scoped=true&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"vcl-container\"},[_c('el-switch',{staticClass:\"run\",attrs:{\"active-text\":\"开始\",\"inactive-text\":\"暂停\"},nativeOn:{\"click\":function($event){return _vm.handleRun($event)}},model:{value:(_vm.runFlag),callback:function ($$v) {_vm.runFlag=$$v},expression:\"runFlag\"}}),_c('div',{staticClass:\"title\"},[_c('p',{staticClass:\"sub-title\"},[_vm._v(\"截止至当前时间招聘最火热的职位是:\")]),(_vm.data.length != 0)?_c('p',[_vm._v(_vm._s(_vm.data[_vm.data.length - 1].name))]):_vm._e()]),_c('div',{staticClass:\"chart\"},[_c('p',{staticClass:\"time\"},[_vm._v(_vm._s(_vm.dateList[_vm.index]))]),_c('div',{ref:\"vcl\",staticClass:\"vcl\"})])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"vcl-container\">\r\n    <el-switch\r\n      v-model=\"runFlag\"\r\n      active-text=\"开始\"\r\n      inactive-text=\"暂停\"\r\n      class=\"run\"\r\n      @click.native=\"handleRun\"\r\n    >\r\n    </el-switch>\r\n    <div class=\"title\">\r\n      <p class=\"sub-title\">截止至当前时间招聘最火热的职位是:</p>\r\n      <p v-if=\"data.length != 0\">{{ data[data.length - 1].name }}</p>\r\n    </div>\r\n    <div class=\"chart\">\r\n      <p class=\"time\">{{ dateList[index] }}</p>\r\n      <div ref=\"vcl\" class=\"vcl\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getDateList, getDateBetween } from '@/utils/date'\r\n// require('./vcl-mock')\r\nimport mirai from '@/views/components/test-mock/vcl-mock'\r\nexport default {\r\n  data() {\r\n    return {\r\n      vclData: mirai.data,\r\n      option: [],\r\n      index: 0,\r\n      data: [],\r\n      positionList: [],\r\n      positionColors: [], // 可合并，但太赶了下次再说\r\n      dateList: [],\r\n      timer: null,\r\n      runFlag: false\r\n    }\r\n  },\r\n  mounted() {\r\n    /**\r\n     * 技术说明\r\n     * ---------------------------------------------------------------------------\r\n     * 1. 通过定时器每秒计算出相邻的两天数据的差值\r\n     * 2. 计算出的差值 / 10, 即每 100毫秒需要往图表添加更新的数据 (100毫秒动画看着流畅).每秒必须清空内部定时器(内部 insideIndex, insideTimer控制)\r\n     * 3. positionColors 用于存储每个职位对应的颜色,用于区分职位.当前颜色由随机函数生成\r\n     * 4. 柱状图 bar和 y轴颜色由 echart提供的 formatter / color的回调函数配合 positionColors.find 当前颜色生成\r\n     * 5. index用于控制当前展示的是哪天的日期数据\r\n     * 6. timer用于控制定时器的开关(暂停/开始功能)\r\n     * 7. 当日期到了最终数据后(即 index === data.length - 1), 清空定时器 timer,重置按钮样式 runFlag\r\n     * 8. 根据按钮 runFlag的值来判断是 开始(true), 还是暂停(flag).如果 (index === data.length - 1), 重置 (index = 0)\r\n     * 9. { getDateList, getDateBetween }获取昨天到 2020-02-19 所有的 YY-MM-DD 日期数组, 提交到后端以获取数据\r\n     * ---------------------------------------------------------------------------\r\n     *\r\n     *\r\n     * 可增加的新功能\r\n     * +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n     * 1.后期可添加日期范围选择\r\n     * 2.根据日期数据搜索\r\n     * 3. 如果想 职位名称在 bar里面，value在 bar外面。可给每个 bar叠加一个 bar。一个 bar.label.position：'inside'。一个 bar.label.position: 'right'\r\n     * +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n     */\r\n  },\r\n  activated() {\r\n    console.log('vcl upupup')\r\n    this.ininChart()\r\n  },\r\n  methods: {\r\n    getData(dataIndex) {\r\n      // 获取索引的数据，用于更新图标数据\r\n      const newData = this.vclData.map((item) => {\r\n        return { name: item.name, value: item.value[dataIndex] }\r\n      })\r\n      // 图表数据排序\r\n      this.data = newData.sort(function(a, b) {\r\n        return a.value - b.value\r\n      })\r\n\r\n      // 图标 y轴名称随排序更换\r\n      this.positionList = this.data.map((item) => {\r\n        return item.name\r\n      })\r\n    },\r\n    run(chart) {\r\n      // 每次执行计算出相间的两组数据的数据差\r\n      const oldData = this.data\r\n\r\n      this.getData(++this.index)\r\n\r\n      const newData = this.data\r\n      const mirai = []\r\n      for (let index = 0; index < newData.length; index++) {\r\n        let speed = (newData[index].value - oldData[index].value) / 10\r\n        speed = Math.round(speed)\r\n        mirai.push({ name: newData[index].name, speed })\r\n      }\r\n\r\n      let insideIndex = 0\r\n\r\n      const insideTimer = setInterval(() => {\r\n        insideIndex++\r\n        // 获取每一秒各职位在一毫秒时的增速\r\n        for (let index = 0; index < this.data.length; index++) {\r\n          const { speed } = mirai.find((item) => {\r\n            return item.name === this.data[index].name\r\n          })\r\n          this.data[index].value += speed\r\n        }\r\n\r\n        // 图表数据排序\r\n        this.data.sort(function(a, b) {\r\n          return a.value - b.value\r\n        })\r\n\r\n        // 图标 y轴名称随排序更换\r\n        this.positionList = this.data.map((item) => {\r\n          return item.name\r\n        })\r\n\r\n        this.option = this.getOption(this.positionList, this.data)\r\n        chart.setOption(this.option, this.data)\r\n\r\n        /**\r\n         * 每秒钟清除自身定时器\r\n         * 如果到了最末尾的数据，设置当前数据为请求数据的最后一项（确保精度问题），并清空定时器\r\n         */\r\n        if (insideIndex === 10) {\r\n          if (this.index === this.dateList.length - 1) {\r\n            this.getData(this.dateList.length - 1)\r\n            this.option = this.getOption(this.positionList, this.data)\r\n            chart.setOption(this.option, this.data)\r\n\r\n            // 重置开关状态\r\n            this.runFlag = false\r\n            clearInterval(this.timer)\r\n          }\r\n          clearInterval(insideTimer)\r\n        }\r\n      }, 100)\r\n    },\r\n    getOption(positionList, data) {\r\n      return {\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          backgroundColor: 'rgba(0,0,0,0.3)',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              precision: '0'\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n          left: '2%',\r\n          right: '2%',\r\n          bottom: '2%',\r\n          top: '2%',\r\n          containLabel: true\r\n        },\r\n        xAxis: {\r\n          type: 'value',\r\n          boundaryGap: [0, 0.01],\r\n          axisTick: {\r\n            show: false\r\n          }\r\n        },\r\n        yAxis: {\r\n          show: true,\r\n          type: 'category',\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          axisLabel: {\r\n            fontSize: 18,\r\n            color: (params) => {\r\n              const name = params\r\n              const color = this.positionColors.find(\r\n                (item) => item.name === name\r\n              ).color\r\n              return color\r\n            }\r\n          },\r\n          data: positionList\r\n        },\r\n        series: [\r\n          {\r\n            name: this.dateList[0],\r\n            type: 'bar',\r\n            data: data,\r\n            barMaxWidth: 21,\r\n            label: {\r\n              show: true,\r\n              position: 'insideRight',\r\n              fontSize: 21,\r\n              offset: [0, -10],\r\n              formatter: function(params) {\r\n                const { name, value } = params\r\n                return `${name}: ${value} 条`\r\n              }\r\n            },\r\n            itemStyle: {\r\n              barBorderRadius: [0, 7, 7, 0],\r\n              color: (params) => {\r\n                const { name } = params\r\n                const color = this.positionColors.find(\r\n                  (item) => item.name === name\r\n                ).color\r\n                return color\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    handleRun() {\r\n      const chart = this.$echarts.init(this.$refs.vcl)\r\n      if (this.index === this.dateList.length - 1) {\r\n        this.index = 0\r\n        this.ininChart()\r\n      }\r\n      if (this.runFlag) {\r\n        this.timer = setInterval(() => {\r\n          this.run(chart)\r\n        }, 1000)\r\n      } else {\r\n        clearInterval(this.timer)\r\n      }\r\n    },\r\n    ininChart() {\r\n      // 获取昨天到 2020-02-19相隔多少天\r\n      const dateNum = getDateBetween('2020-02-19', getDateList())\r\n\r\n      // 获取昨天到 2020-02-19的日期\r\n      const dateList = getDateList(dateNum + 1).reverse()\r\n\r\n      this.dateList = dateList\r\n\r\n      /**\r\n       * 根据传入的索引获取对应索引（日期）的数据的函数\r\n       */\r\n      // 根据传入的索引获取对应索引（日期）的数据\r\n      this.getData(this.index)\r\n\r\n      const chart = this.$echarts.init(this.$refs.vcl)\r\n\r\n      this.positionColors = this.positionList.map((item) => {\r\n        const color = `rgb(${Math.round(Math.random() * 255)}, ${Math.round(\r\n          Math.random() * 255\r\n        )}, ${Math.round(Math.random() * 255)})`\r\n        return { name: item, color }\r\n      })\r\n\r\n      // 更新 option里的数据的函数\r\n\r\n      // 更新 option里的数据\r\n      this.option = this.getOption(this.positionList, this.data)\r\n\r\n      // 渲染图表\r\n      chart.setOption(this.option, this.data)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.vcl-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  background: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  .run {\r\n    position: absolute;\r\n    right: 20px;\r\n    top: 10px;\r\n  }\r\n  .title {\r\n    padding: 10px 20px;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: flex-end;\r\n    color: #606266;\r\n    .sub-title {\r\n      font-size: 20px;\r\n      color: #909399;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n  .chart {\r\n    flex: 1;\r\n    position: relative;\r\n    .vcl {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    .time {\r\n      position: absolute;\r\n      right: 40px;\r\n      bottom: 50px;\r\n      font-size: 37px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./vcl.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./vcl.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./vcl.vue?vue&type=template&id=74d218b9&scoped=true&\"\nimport script from \"./vcl.vue?vue&type=script&lang=js&\"\nexport * from \"./vcl.vue?vue&type=script&lang=js&\"\nimport style0 from \"./vcl.vue?vue&type=style&index=0&id=74d218b9&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"74d218b9\",\n  null\n  \n)\n\nexport default component.exports","/**\r\n * 获取前 num 天的日期（不包括今天）\r\n * 默认获取昨天日期\r\n * @param {Number} 获取的时间天数\r\n * @returns {Array} 时间格式为 YYYY-MM-DD\r\n */\r\n\r\nexport function getDateList(num) {\r\n  const dateList = [...Array(num).keys()].map((days) => {\r\n    const t = new Date(Date.now() - 24 * 60 * 60 * 1000 * (days + 1))\r\n    let month = t.getMonth() + 1\r\n    month < 10 && (month = `0${month}`)\r\n    let day = t.getDate()\r\n    day < 10 && (day = `0${day}`)\r\n    const date = `${t.getFullYear()}-${month}-${day}`\r\n    return date\r\n  })\r\n  return dateList\r\n}\r\n\r\n/**\r\n * 获取两个日期的间隔天数\r\n * @param {string} star 起始日 YYYY-MM-DD\r\n * @param {string} end 结束日 YYYY-MM-DD\r\n * @returns {Number}\r\n */\r\n\r\nexport function getDateBetween(star, end) {\r\n  var startDate = Date.parse(star)\r\n  var endDate = Date.parse(end)\r\n  var day = (endDate - startDate) / (24 * 60 * 60 * 1000)\r\n  return day\r\n}\r\n","import { getDateList, getDateBetween } from '@/utils/date'\r\n// 获取昨天到 2020-02-19相隔多少天\r\nconst dateNum = getDateBetween('2020-02-19', getDateList())\r\n\r\n// 获取昨天到 2020-02-19的日期\r\nconst dateList = getDateList(dateNum + 1).reverse()\r\n\r\nconst positionList = [\r\n  '后端开发',\r\n  '测试',\r\n  '人工智能',\r\n  '移动前端开发',\r\n  '运维',\r\n  '数据开发',\r\n  '前端开发',\r\n  '高端技术职位',\r\n  '项目管理',\r\n  '硬件开发',\r\n  '企业软件',\r\n  '产品经理',\r\n  '运营'\r\n]\r\n\r\nconst mirai = positionList.map((item) => {\r\n  let num = 0\r\n  const date = dateList.map(() => {\r\n    num += Math.round(Math.random() * 20000 + 100)\r\n    return num\r\n  })\r\n  return { name: item, value: date }\r\n})\r\n\r\nexport default {\r\n  success: true,\r\n  msg: null,\r\n  code: 200,\r\n  data: mirai\r\n}\r\n"],"sourceRoot":""}